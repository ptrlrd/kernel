name: Deploy Kernel on Self-hosted Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure Git
        run: |
          git config --global user.name '${{ secrets.GIT_USER_NAME }}'
          git config --global user.email '${{ secrets.GIT_USER_EMAIL }}'
          BRANCH_NAME=${GITHUB_REF#refs/heads/} || "main"
          git checkout $BRANCH_NAME

      - name: Commit banned_users.json
        run: |
          if git status --porcelain | grep 'data/banned_users.json'; then
            git add data/banned_users.json
            git commit -m "Automatically update banned_users.json"
            git remote set-url origin https://x-access-token:${{ secrets.GIT_TOKEN }}@github.com/${{ secrets.GIT_USER_NAME }}/kernel.git
            git push --set-upstream origin $(git branch --show-current)
          else
            echo "No changes in banned_users.json"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ptrlrd/kernel:latest

      - name: Create .env file for Docker Swarm
        run: |
          echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" > .env
          echo "PREFIX=${{ secrets.PREFIX }}" >> .env

      - name: Pull Latest Docker Image
        run: docker pull ptrlrd/kernel:latest

      - name: Deploy to Docker Swarm
        run: |
          docker service create \
            --name kernel \
            --env-file .env \
            --replicas 1 \
            --with-registry-auth \
            --publish published=3000,target=3000 \
            ptrlrd/kernel:latest \
            || docker service update \
              --env-file .env \
              --force \
              --image ptrlrd/kernel:latest \
              kernel

      - name: Clean up old images
        run: docker image prune -a -f
